# - FUN: función del estadístico E para el que se calcula la diferencia
# Valor:
# - diferencia E_1 - E_2
calcular_diferencia <- function(muestra_1, muestra_2, FUN){
diferencia <- FUN(muestra_1) - FUN(muestra_2)
return(diferencia)
}
# Función para hacer una permutación y calcular el estadístico
# de interés
# Argumentos:
# - muestra_1, muestra_2: vectores numéricos con las muestras a comparar
# - FUN: función del estadístico E para el que se calcula la diferencia
# Valor:
# - diferencia E_1 - E_2
permutar <- function(muestra_1, muestra_2, FUN){
n_1 <- length(muestra_1)
n_2 <- length(muestra_2)
# Hacer la permutación
permutacion <- sample(c(muestra_1, muestra_2), size = n_1 + n_2,
replace = FALSE)
# Asignar elementos a los dos grupos
permutacion_1 <- permutacion[1 : n_1]
permutacion_2 <- permutacion[n_1 + 1 : n_2]
# Calcular y devolver la diferencia de medias
return(calcular_diferencia(permutacion_1, permutacion_2, FUN))
}
# Función para calcular el valor p
# Argumentos:
# - distribución: distribución nula del estadístico de interés
# - valor observado: valor del estadístico de interés para las muestras originales
# - repeticiones: cantidad de permutaciones a realizar
# - alternative: tipo de hipótesis alternativa ("two.sided" para
#   hipótesis bilateral, "greater" o "less" para hipótesis unilaterales)
# Valor:
# - el valor p calculado
calcular_valor_p <- function(distribucion, valor_observado, repeticiones, alternative){
if(alternative == "two.sided"){
numerador <- sum(abs(distribucion) > abs(valor_observado)) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else if(alternative == "greater"){
numerador <- sum(distribucion > valor_observado) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else{
numerador <- sum(distribucion < valor_observado) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
return(valor_p)
}
# Función para graficar una distribución
# Argumentos:
# - distribución: distribución nula el estadístico de interés
# - ...: otros argumentos a ser entregados a gghistogram y ggqqplot
graficar_distribucion <- function(distribucion, ...){
observaciones <- data.frame(distribucion)
histograma <- gghistogram(observaciones, x = "distribucion",
xlab = "Estadistico de interes",
ylab = "Frecuencia", ...)
qq <- ggqqplot(observaciones, x = "distribucion", ...)
# Crear una unica figura con todos losgraficos de dispersion
figura <- ggarrange(histograma, qq, ncol = 2, nrow = 1)
print(figura)
}
# Función para hacer la prueba de permutaciones
# Argumentos :
# - muestra_1, muestra_2: vectores numéricos con las muestras a comparar
# - repeticiones: cantidad de permutaciones a realizar
# - FUN: función del estadístico E para el que se calcula la diferencia
# - alternative: tipo de hipótesis alternativa ("two.sided" para
#   hipótesis bilateral, "greater" o "less" para hipotesis unilaterales)
# - plot: si es TRUE, construye el grafico de la distribución generada
# - ...: otros argumentos a ser entregados a graficar_distribucion
contrastar_hipotesis_permutaciones <- function(muestra_1, muestra_2,
repeticiones, FUN,
alternative, plot, ...){
cat("Prueba de permutaciones\n\n")
cat("Hipotesis alternativa:", alternative, "\n")
observado <- calcular_diferencia(muestra_1, muestra_2, FUN)
cat("Valor observado:", observado, "\n")
distribucion <- rep(NA, repeticiones)
for(i in 1:repeticiones){
distribucion[i] <- permutar(muestra_1, muestra_2, FUN)
}
if(plot){
graficar_distribucion(distribucion, ...)
}
valor_p <- calcular_valor_p(distribucion, observado, repeticiones,
"two.sided")
cat("Valor p:", valor_p, "\n\n")
}
valores_F
p <- calcular_valor_p(valores_F, anova_original$ANOVA$F, R, "two.sided")
distribuciones
valores_F
p <- calcular_valor_p(valores_F, anova_original$ANOVA$F, R, "two.sided")
cat("el valor p es: ", p )
graficar_distribucion(valores_F)
source("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act11/EP11-respuesta-sala.R", encoding = 'UTF-8')
#
library(readxl)
library(dplyr)
library(ggpubr)
library(ggplot2)
library(simpleboot)
set.seed (432)
basename <- "EP11 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act11",basename)
datos <- read.csv2(file = file)
#
library(readxl)
library(dplyr)
library(ggpubr)
library(ggplot2)
library(simpleboot)
set.seed (432)
basename <- "EP11 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act11",basename)
datos <- read.csv2(file = file)
##############################
#####     Pregunta 1     #####
##############################
#Propongan una pregunta de investigaci?n original, que involucre la comparaci?n de las medias de dos
#grupos independientes (m?s abajo se dan unos ejemplos). Fijando una semilla propia, seleccionen una
#muestra aleatoria de hogares (250 < n < 500) y respondan la pregunta propuesta utilizando una simulaci?n
#Monte Carlo.
##############################
#####     Desarrollo     #####
##############################
# Funcionpara calcular la diferencia de medias
# Argumentos:
# - muestra_1, muestra_2: vectores numericos con las muestras a comparar
# - FUN: funcion del estadistico E para el que se calcula la diferencia
# Valor:
# - diferencia E_1 - E_2
calcular_diferencia <- function(muestra_1, muestra_2, FUN){
diferencia <- FUN(muestra_1) - FUN(muestra_2)
return(diferencia)
}
# Funcion para hacer una permutacion y calcular el estadistico
# de interes
# Argumentos:
# - muestra_1, muestra_2: vectores numericos con las muestras a comparar
# - FUN: funcion del estadistico E para el que se calcula la diferencia
# Valor:
# - diferencia E_1 - E_2
permutar <- function(muestra_1, muestra_2, FUN){
n_1 <- length(muestra_1)
n_2 <- length(muestra_2)
# Hacer la permutacion
permutacion <- sample(c(muestra_1, muestra_2), size = n_1 + n_2,
replace = FALSE)
# Asignar elemento s a los dos grupos
permutacion_1 <- permutacion[1 : n_1]
permutacion_2 <- permutacion[n_1 + 1 : n_2]
# Calcular y devolver la diferencia de medias
return(calcular_diferencia(permutacion_1, permutacion_2, FUN))
}
# Funcion para calcular el valor p
# Argumentos:
# - distribucion: distribucion nula del estadistico de interes
# - valor observado: valor del estadistico de interes para las muestras originales
# - repeticiones: cantidad de permutaciones a realizar
# - alternative: tipo de hipotesis alternativa ("two.sided" para
#   hipotesis bilateral, "greater" o "less" para hipotesis unilaterales)
# Valor:
# - el valorp calculado
calcular_valor_p <- function(distribucion, valor_observado,
repeticiones, alternative){
if(alternative == "two.sided"){
numerador <- sum(abs(distribucion) > abs(valor_observado)) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else if(alternative == "greater"){
numerador <- sum(distribucion > valor_observado) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else{
numerador <- sum(distribucion < valor_observado) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
return(valor_p)
}
# Funcion para graficar una distribucion
# Argumentos:
# - distribucion: distribucion nula el estadistico de interes
# - ...: otros argumentos a ser entregados a gghistogram y ggqqplot
graficar_distribucion <- function(distribucion){
observaciones <- data.frame(distribucion)
histograma <- gghistogram(observaciones, x = "distribucion",
xlab = "Estadistico de interes",
ylab = "Frecuencia")
qq <- ggqqplot(observaciones, x = "distribucion")
# Crear una unica figura con todos losgraficos de dispersion
figura <- ggarrange(histograma, qq, ncol = 2, nrow = 1)
print(figura)
}
# Funcion para hacer la prueba de permutaciones
# Argumentos :
# - muestra_1, muestra_2: vectores numericos con las muestras a comparar
# - repeticiones: cantidad de permutaciones a realizar
# - FUN: funcion del estadistico E para el que se calcula la diferencia
# - alternative: tipo de hipotesis alternativa ("two.sided" para
#   hipotesis bilateral, "greater" o "less" para hipotesis unilaterales)
# - plot: si es TRUE, construye el grafico de la distribucion generada
# - ...: otros argumentos a ser entregados a graficar_distribucion
contrastar_hipotesis_permutaciones <- function(muestra_1, muestra_2,
repeticiones, FUN,
alternative, plot){
cat("Prueba de permutaciones\n\n")
cat("Hipotesis alternativa:", alternative, "\n")
observado <- calcular_diferencia(muestra_1, muestra_2, FUN)
cat("Valor observado:", observado, "\n")
distribucion <- rep(NA, repeticiones)
for(i in 1:repeticiones){
distribucion[i] <- permutar(muestra_1, muestra_2, FUN)
}
if(plot){
graficar_distribucion(distribucion)
}
valor_p <- calcular_valor_p(distribucion, observado, repeticiones,
"two.sided")
cat("Valor p:", valor_p, "\n\n")
}
datos2 <- datos %>% filter(region == "Región de Tarapacá" |
region == "Región Metropolitana de Santiago" |
region == "Región de Magallanes y de la Antártica Chilena" ,numper != "NA")
#se define el valor del alpha
alpha <- 0.01
set.seed(523)
# Se obtiene la muestra de tama?o 500
tamano <- 500
muestra <- datos2[sample(nrow(datos2), tamano),]
integrantes <- as.integer(muestra[["numper"]])
region <- factor(muestra[["region"]])
instancia <- factor(1:tamano)
datos3 <- data.frame(instancia, integrantes, region)
View(datos3)
integrantes_tarapaca <- datos3 %>% filter(region == "Región de Tarapacá")
n_integrantes_tarapaca <- nrow(integrantes_tarapaca)
integrantes_metropolitana <- datos3 %>% filter(region == "Región Metropolitana de Santiago")
n_integrantes_metropolitana <- nrow(integrantes_metropolitana)
integrantes_magallanes <- datos3 %>% filter(region == "Región de Magallanes y de la Antártica Chilena")
n_integrantes_magallanes <- nrow(integrantes_magallanes)
my_boot <- function(x){
#se toma una muestra con reemplazo para cada grupo
i_integrantes_tarapaca <- sample(1:n_integrantes_tarapaca, replace = TRUE)
i_integrantes_metropolitana <- sample(1:n_integrantes_metropolitana, replace = TRUE)
i_integrantes_magallanes <- sample(1:n_integrantes_magallanes, replace = TRUE)
rbind(integrantes_tarapaca[i_integrantes_tarapaca,], integrantes_metropolitana[i_integrantes_metropolitana,], integrantes_magallanes[i_integrantes_magallanes,])
}
my_F <- function(frame){
# Obtener valor observado, correspondiente al estad?stico F entregado
# por ANOVA para la muestra original
anova <- ezANOVA(frame, dv = integrantes, between = region,
wid = instancia, return_aov = FALSE)
invisible(anova$ANOVA$F)
}
calcular_valor_p <- function(distribucion, valor_observado, repeticiones, alternative){
if (alternative == "two.sided"){
numerador <- sum (abs(distribucion) > abs(valor_observado)) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else if(alternative == "greater"){
numerador <- sum(abs(distribucion) > valor_observado) + 1
denominador <- repeticiones
valor_p <- numerador / denominador
}
else{
numerador <- sum(distribucion < valor_observado) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
return(valor_p)
}
# Se obtiene el estad?stico F original
anova_original <- ezANOVA(datos3, dv = integrantes, between = region,
wid = instancia, return_aov = FALSE)
print(anova_original)
R <- 399
set.seed(705) # segunda semilla
# Se llama a la funci?n my_boot
# lapply en lista
distribucion1  <- lapply(1:R, my_boot)
#print(distribucion1)
#guarda en un vector
suppressMessages(suppressWarnings(Fs <- sapply(distribucion1, my_F))) # evitar los warnings
#Fs <- sapply(distribucion1, my_F)
p <- calcular_valor_p(Fs, anova_original$ANOVA$F, R, "two.sided")
cat("el valor p es: ", p )
graficar_distribucion(Fs)
source("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act11/EP011-respuesta-sala-3.R", encoding = 'UTF-8')
media_diferencias <- function(datos, ing1, ing2) {
media <- mean(datos[[ing1]] - datos[[ing2]])
return(media)
}
AT <- "Región de Atacama"
A <- "Región de Antofagasta"
L <- "Región de Los Lagos"
dif1 <- media_diferencias(datos3, AT , A)
dif2 <- media_diferencias(datos3, AT , L)
dif3 <- media_diferencias(datos3, A , L)
dif1
media_diferencias <- function(datos , ing1, ing2) {
i1 <- datos[["ing1"]] == ing1
i2 <- datos[["ing2"]] == ing2
media <- mean(datos[["s4"]][i1]) - mean(datos[["s4"]][i2]) # CAMBIAR ESTA LINEA
return(media)
}
dif1 <- media_diferencias(datos3, AT , A)
View(datos3)
media_diferencias <- function(datos , reg1, reg2) {
i1 <- datos[["region"]] == ing1
i2 <- datos[["region"]] == ing2
media <- mean(datos[["ingreso"]][i1]) - mean(datos[["ingreso"]][i2])
return(media)
}
dif1 <- media_diferencias(datos3, AT , A)
media_diferencias <- function(datos , reg1, reg2) {
i1 <- datos[["region"]] == reg1
i2 <- datos[["region"]] == reg2
media <- mean(datos[["ingreso"]][i1]) - mean(datos[["ingreso"]][i2])
return(media)
}
dif1 <- media_diferencias(datos3, AT , A)
dif1
dif2 <- media_diferencias(datos3, AT , L)
dif3 <- media_diferencias(datos3, A , L)
dif2
dif3
dif_dist_1 <- distribucion_diferencias(distribuciones , AT , A )
dif_dist_2 <- distribucion_diferencias(distribuciones , AT , L )
dif_dist_3 <- distribucion_diferencias(distribuciones , A , L )
num1 <- sum(abs(dif_dist_1) > abs(dif1)) + 1
den1 <- R + 1
p_atacama_antofagasta <- num1 / den1
num2 <- sum(abs(dif_dist_2) > abs(dif2)) + 1
den2 <- R + 1
p_atacama_lagos <- num2 / den2
num3 <- sum(abs(dif_dist_3) > abs(dif3)) + 1
den3 <- R + 1
p_antofagasta_lagos <- num3 / den3
p_atacama_antofagasta
p_atacama_lagos
p_antofagasta_lagos
tabla <- data.frame(instanciaB, tiempoB)
instanciaA <- c(167, 8, 65, 91, 125, 64, 196, 117, 41, 56)
tiempoA <- c(1510394, 251843, 834565, 37449, 48705, 402929, 885722, 8576989, 62764, 783108)
instanciaB <- c(197, 7, 21, 195, 191,149, 39, 139, 154, 137)
tiempoB <- c(48408, 35974, 5743260, 6684497, 1252837, 6701654, 6568968, 120276, 1174562, 2830464)
tabla <- data.frame(instanciaB, tiempoB)
instanciaA <- c(167, 8, 65, 91, 125, 64, 196, 117, 41, 56)
tiempoA <- c(1510394, 251843, 834565, 37449, 48705, 402929, 885722, 8576989, 62764, 783108)
instanciaB <- c(197, 7, 21, 195, 191,149, 39, 139, 154, 137)
tiempoB <- c(48408, 35974, 5743260, 6684497, 1252837, 6701654, 6568968, 120276, 1174562, 2830464)
tabla <- data.frame(instanciaB, tiempoB)
View(tabla)
library(ggplot2)
library(ggplot2)
ggplot(tabla)
ggplot(tabla$tiempoB)
ggplot(tabla)
a <- ggplot(tabla)
print(a)
source("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act12/EP012-respuesta-equipo-6.R")
print(a)
library(ggpubr)
g <- gghistogram(tabla, x = "tiempoB", bins = 10,
xlab = " Tiempo [s]", ylab = " instancia"
)
print(g)
g <- ggdensity(tabla, x = "tiempoB", bins = 10,
xlab = " Tiempo [s]", ylab = " instancia"
)
print(g)
g <- ggdensity(tabla, x = "instanciaB", bins = 10,
xlab = " Tiempo [s]", ylab = " instancia"
)
print(g)
g <- gghistogram(tabla, x = "instanciaB", bins = 10,
xlab = " Tiempo [s]", ylab = " instancia"
)
print(g)
g <- gghistogram(tabla, x = "instanciaB", bins = 20,
xlab = " Tiempo [s]", ylab = " instancia"
)
print(g)
g <- gghistogram(tabla, x = "tiempoB", bins = 10,
xlab = "Tiempo [ms]", ylab = " Frecuencia"
)
print(g)
g <- gghistogram(tabla, x = "tiempoB", bins = 20,
xlab = "Tiempo [ms]", ylab = " Frecuencia"
)
print(g)
library(ggpubr)
library(rcompanion)
transformacion <- transformTukey(tabla$tiempoB, start = -4, end = 4,
int = 0.001, returnLambda = TRUE)
transformacion <- transformTukey(tabla$tiempoB, start = -4, end = 4,
int = 0.0001, returnLambda = TRUE)
transformacion
library(DescTools)
lambda <- BoxCoxLambda(tabla$tiempoB, lower = -4, upper = 4)
cat("Lambda óptimo:", lambda)
transformacion <- BoxCox(datos$Population, lambda
transformacion
lambda <- BoxCoxLambda(tabla$tiempoB, lower = -4, upper = 4)
cat("Lambda óptimo:", lambda)
transformacion <- BoxCox(tabla$tiempoB, lambda)
g1 <- ggqqplot(transformacion, color = "purple")
print(g1)
g2 <- gghistogram(tabla, bins = 10, x = "tiempoB", color = "purple",
fill = "purple", xlab = "Tiempo[ms] (Box-Cox)",
ylab = "Frecuencia") + rotate_x_text(45)
print(g2)
g2 <- gghistogram(tabla, bins = 10, x = "transformacion", color = "purple",
fill = "purple", xlab = "Tiempo[ms] (Box-Cox)",
ylab = "Frecuencia") + rotate_x_text(45)
print(g2)
g2 <- gghistogram(tabla2, bins = 10, x = "transformacion", color = "purple",
fill = "purple", xlab = "Tiempo[ms] (Box-Cox)",
ylab = "Frecuencia") + rotate_x_text(45)
print(g2)
tabla2 <- data.frame(instanciaB, transformacion)
# Graficar los datos transformados.
g1 <- ggqqplot(transformacion, color = "purple")
print(g1)
g2 <- gghistogram(tabla2, bins = 10, x = "transformacion", color = "purple",
fill = "purple", xlab = "Tiempo[ms] (Box-Cox)",
ylab = "Frecuencia") + rotate_x_text(45)
print(g2)
shapiro.test(transformacion)
transformacion
tabla2 <- data.frame(instanciaB, transformacion)
# Graficar los datos transformados.
g1 <- ggqqplot(transformacion, color = "purple")
print(g1)
g2 <- gghistogram(tabla2, bins = 10, x = "transformacion", color = "purple",
fill = "purple", xlab = "Tiempo[ms] (Box-Cox)",
ylab = "Frecuencia") + rotate_x_text(45)
print(g2)
shapiro.test(transformacion)
library(ggpubr)
library(ggpubr)
library(rcompanion)
library(DescTools)
# Cargar datos
instanciaA <- c(167, 8, 65, 91, 125, 64, 196, 117, 41, 56)
tiempoA <- c(1510394, 251843, 834565, 37449, 48705, 402929, 885722, 8576989, 62764, 783108)
instanciaB <- c(197, 7, 21, 195, 191,149, 39, 139, 154, 137)
tiempoB <- c(48408, 35974, 5743260, 6684497, 1252837, 6701654, 6568968, 120276, 1174562, 2830464)
tablaB <- data.frame(instanciaB, tiempoB)
a <- ggplot(tablaB)
print(a)
g <- gghistogram(tablaB, x = "tiempoB", bins = 20,
xlab = "Tiempo [ms]", ylab = " Frecuencia"
)
print(g)
# Buscar la mejor transformación de Tukey usando una función de R.
transformacionTukey <- transformTukey(tablaB$tiempoB, start = -4, end = 4,
int = 0.0001, returnLambda = TRUE)
# Buscar la mejor transformación Box-Cox usando funciones de R.
lambdaBC <- BoxCoxLambda(tablaB$tiempoB, lower = -4, upper = 4)
cat("Lambda óptimo:", lambda)
transformacionBoxCox <- BoxCox(tablaB$tiempoB, lambda)
tablaB2 <- data.frame(instanciaB, transformacion)
# Graficar los datos transformados.
g1 <- ggqqplot(transformacion, color = "purple")
print(g1)
g2 <- gghistogram(tablaB2, bins = 10, x = "transformacion", color = "purple",
fill = "purple", xlab = "Tiempo[ms] (Box-Cox)",
ylab = "Frecuencia") + rotate_x_text(45)
print(g2)
library(ggpubr)
library(ggpubr)
library(rcompanion)
library(DescTools)
# Cargar datos
instanciaA <- c(167, 8, 65, 91, 125, 64, 196, 117, 41, 56)
tiempoA <- c(1510394, 251843, 834565, 37449, 48705, 402929, 885722, 8576989, 62764, 783108)
instanciaB <- c(197, 7, 21, 195, 191,149, 39, 139, 154, 137)
tiempoB <- c(48408, 35974, 5743260, 6684497, 1252837, 6701654, 6568968, 120276, 1174562, 2830464)
tablaB <- data.frame(instanciaB, tiempoB)
a <- ggplot(tablaB)
print(a)
g <- gghistogram(tablaB, x = "tiempoB", bins = 20,
xlab = "Tiempo [ms]", ylab = " Frecuencia"
)
print(g)
# Buscar la mejor transformación de Tukey usando una función de R.
transformacionTukey <- transformTukey(tablaB$tiempoB, start = -4, end = 4,
int = 0.001, returnLambda = TRUE)
# Buscar la mejor transformación Box-Cox usando funciones de R.
lambdaBC <- BoxCoxLambda(tablaB$tiempoB, lower = -4, upper = 4)
cat("Lambda óptimo:", lambda)
transformacionBoxCox <- BoxCox(tablaB$tiempoB, lambda)
tablaB2 <- data.frame(instanciaB, transformacion)
# Graficar los datos transformados.
g1 <- ggqqplot(transformacion, color = "purple")
print(g1)
g2 <- gghistogram(tablaB2, bins = 10, x = "transformacion", color = "purple",
fill = "purple", xlab = "Tiempo[ms] (Box-Cox)",
ylab = "Frecuencia") + rotate_x_text(45)
print(g2)
