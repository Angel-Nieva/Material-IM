source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R")
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R")
View(lecturaDatos)
View(lecturaDatos)
getwd()
ifelse(3>2,2,3)
ifelse(3<2,2,3)
ifelse(3<2,2,4)
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
View(sobrepeso)
View(no_sobrepeso)
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
install.packages("leaps")
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
View(modelos)
plot(modelos)
plot(modelos)
View(muestra_entrenamiento)
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
size(muestra_entrenamiento)
nrow(muestra_entrenamiento)
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
sample.int(100,4,replace=FALSE)
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
modelo
modelo <- train(Weight ~ Biiliac.diameter + Ankles.diameter + Shoulder.Girth + Waist.Girth + Thigh.Girth + Knee.Girth + Age, data = muestra_entrenamiento, method = "glm",
family = binomial(link = "logit"),
trControl = trainControl(method = "cv", number = 10,
savePredictions = TRUE))
print(summary(modelo))
modelo <- train(Weight ~ Biiliac.diameter + Ankles.diameter + Shoulder.Girth + Waist.Girth + Thigh.Girth + Knee.Girth + Age, data = muestra_entrenamiento, method = "glm",
family = binomial(link = "logit"),
trControl = trainControl(method = "cv", number = 10,
savePredictions = TRUE))
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
mse_entrenamiento <- mean(error_entrenamiento ** 2)
print(mse_entrenamiento)
error_entrenamiento <- muestra_entrenamiento[["predictora"]] - predicciones_entrenamiento
print(error_entrenamiento)
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
predicciones_prueba
media_y <- mean(predicciones_prueba)
media_y
source("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP15-resupesta-equipo-6.R", encoding = 'WINDOWS-1252')
basename <- "EP13 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act15",basename)
datos <- read.csv2(file = file)
basename <- "EP13 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act15",basename)
datos <- read.csv2(file = file)
library(dplyr)
library(caret)
library(leaps)
library(bootES)
library(dplyr)
library(caret)
library(leaps)
library(bootES)
datos <- datos %>% mutate(EN = ifelse(IMC >= 25.0, 1, 0))
semilla <- 4097
set.seed(semilla)
#2.Seleccionar una muestra
sobrepeso <- datos %>% filter(EN == 1) %>% sample_n(50)
no_sobrepeso <- datos %>% filter(EN == 0) %>% sample_n(50)
sobrepeso <- datos %>% filter(EN == 1) %>% sample_n(50)
no_sobrepeso <- datos %>% filter(EN == 0) %>% sample_n(50)
datos <- datos %>% mutate(EN = ifelse(IMC >= 25.0, 1, 0))
#1. Definir la semilla a utilizar, que corresponde a los primeros cinco d?gitos del RUN del integrante de mayor edad del equipo.
semilla <- 4097
set.seed(semilla)
#2.Seleccionar una muestra de 100 personas, asegurando que la mitad tenga estado nutricional ?sobrepeso? y la otra mitad ?no sobrepeso?.
sobrepeso <- datos %>% filter(EN == 1) %>% sample_n(50)
no_sobrepeso <- datos %>% filter(EN == 0) %>% sample_n(50)
datos <- datos %>% mutate(EN = ifelse(IMC >= 25.0, 1, 0))
library(dplyr)
library(caret)
library(leaps)
library(bootES)
basename <- "EP13 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act15",basename)
datos <- read.csv2(file = file)
# El equipo crea la variable IMC (?ndice de masa corporal) como el peso de una persona (en kilogramos)
# dividida por el cuadrado de su estatura (en metros).
datos <- lecturaDatos %>% mutate(IMC = Weight/((Height/100)^2))
# Si bien esta variable se usa para clasificar a las personas en varias clases de estado nutricional
# (bajo peso, normal, sobrepeso, obesidad, obesidad mórbida), para efectos de este ejercicio,
# usaremos dos clases: sobrepeso (IMC ≥ 25,0) y no sobrepeso (IMC ≤ 25,0).
# El equipo crea la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona.
# Creando la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona,
# siendo 1 Sobrepeso y 0 No sobrepeso.
datos <- datos %>% mutate(EN = ifelse(IMC >= 25.0, 1, 0))
View(datos)
library(dplyr)
library(caret)
library(leaps)
library(bootES)
basename <- "EP13 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act15",basename)
datos <- read.csv2(file = file)
# El equipo crea la variable IMC (?ndice de masa corporal) como el peso de una persona (en kilogramos)
# dividida por el cuadrado de su estatura (en metros).
datos <- datos %>% mutate(IMC = Weight/((Height/100)^2))
# Si bien esta variable se usa para clasificar a las personas en varias clases de estado nutricional
# (bajo peso, normal, sobrepeso, obesidad, obesidad mórbida), para efectos de este ejercicio,
# usaremos dos clases: sobrepeso (IMC ≥ 25,0) y no sobrepeso (IMC ≤ 25,0).
# El equipo crea la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona.
# Creando la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona,
# siendo 1 Sobrepeso y 0 No sobrepeso.
datos <- datos %>% mutate(EN = ifelse(IMC >= 25.0, 1, 0))
#1. Definir la semilla a utilizar, que corresponde a los primeros cinco d?gitos del RUN del integrante de mayor edad del equipo.
semilla <- 4097
set.seed(semilla)
#2.Seleccionar una muestra de 100 personas, asegurando que la mitad tenga estado nutricional ?sobrepeso? y la otra mitad ?no sobrepeso?.
sobrepeso <- datos %>% filter(EN == 1) %>% sample_n(50)
no_sobrepeso <- datos %>% filter(EN == 0) %>% sample_n(50)
n <- nrow(muestra)
n_entrenamiento <- floor(0.7 * n)
numeros <- sample.int(n = n, size = n_entrenamiento, replace = FALSE)
muestra_entrenamiento <- muestra[numeros,]
muestra_prueba <- datos[-numeros,]
muestra <- rbind(sobrepeso,no_sobrepeso)
n <- nrow(muestra)
n_entrenamiento <- floor(0.7 * n)
numeros <- sample.int(n = n, size = n_entrenamiento, replace = FALSE)
muestra_entrenamiento <- muestra[nume
muestra_prueba <- datos[-numeros,]
library(dplyr)
library(caret)
library(leaps)
library(bootES)
basename <- "EP13 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act15",basename)
datos <- read.csv2(file = file)
# El equipo crea la variable IMC (?ndice de masa corporal) como el peso de una persona (en kilogramos)
# dividida por el cuadrado de su estatura (en metros).
datos <- datos %>% mutate(IMC = Weight/((Height/100)^2))
# Si bien esta variable se usa para clasificar a las personas en varias clases de estado nutricional
# (bajo peso, normal, sobrepeso, obesidad, obesidad mórbida), para efectos de este ejercicio,
# usaremos dos clases: sobrepeso (IMC ≥ 25,0) y no sobrepeso (IMC ≤ 25,0).
# El equipo crea la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona.
# Creando la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona,
# siendo 1 Sobrepeso y 0 No sobrepeso.
datos <- datos %>% mutate(EN = ifelse(IMC >= 25.0, 1, 0))
#1. Definir la semilla a utilizar, que corresponde a los primeros cinco d?gitos del RUN del integrante de mayor edad del equipo.
semilla <- 4097
set.seed(semilla)
#2.Seleccionar una muestra de 100 personas, asegurando que la mitad tenga estado nutricional ?sobrepeso? y la otra mitad ?no sobrepeso?.
sobrepeso <- datos %>% filter(EN == 1) %>% sample_n(50)
no_sobrepeso <- datos %>% filter(EN == 0) %>% sample_n(50)
muestra <- rbind(sobrepeso,no_sobrepeso)
n <- nrow(muestra)
n_entrenamiento <- floor(0.7 * n)
numeros <- sample.int(n = n, size = n_entrenamiento, replace = FALSE)
muestra_entrenamiento <- muestra[numeros,]
muestra_prueba <- datos[-numeros,]
muestra_entrenamiento["IMC"] <- NULL
muestra_entrenamiento["Height"] <- NULL
muestra_entrenamiento["EN"] <- NULL
muestra_entrenamiento["IMC"] <- NULL
muestra_entrenamiento["IMC"] <- NULL
muestra_entrenamiento["Height"] <- NULL
muestra_entrenamiento["EN"] <- NULL
muestra_entrenamiento["Gender"] <- NULL
modelos <- regsubsets(Weight ~ ., data = muestra_entrenamiento, method = "exhaustive",
nbest = 2, nvmax = 8)
print(plot(modelos))
print(plot(modelos))
B = 999
B <- 999
modelo <- train(Weight ~ Biiliac.diameter + Elbows.diameter + Shoulder.Girth + Waist.Girth + Thigh.Girth +
St.Minimum.Girth + Knee.Girth + Age, data = muestra_entrenamiento, method = "lm",
trControl = trainControl(method = "boot", number = B,
savePredictions = TRUE))
library(dplyr)
library(caret)
library(leaps)
library(bootES)
basename <- "EP13 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act15",basename)
datos <- read.csv2(file = file)
# El equipo crea la variable IMC (?ndice de masa corporal) como el peso de una persona (en kilogramos)
# dividida por el cuadrado de su estatura (en metros).
datos <- datos %>% mutate(IMC = Weight/((Height/100)^2))
# Si bien esta variable se usa para clasificar a las personas en varias clases de estado nutricional
# (bajo peso, normal, sobrepeso, obesidad, obesidad mórbida), para efectos de este ejercicio,
# usaremos dos clases: sobrepeso (IMC ≥ 25,0) y no sobrepeso (IMC ≤ 25,0).
# El equipo crea la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona.
# Creando la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona,
# siendo 1 Sobrepeso y 0 No sobrepeso.
datos <- datos %>% mutate(EN = ifelse(IMC >= 25.0, 1, 0))
#1. Definir la semilla a utilizar, que corresponde a los primeros cinco d?gitos del RUN del integrante de mayor edad del equipo.
semilla <- 4097
set.seed(semilla)
#2.Seleccionar una muestra de 100 personas, asegurando que la mitad tenga estado nutricional ?sobrepeso? y la otra mitad ?no sobrepeso?.
sobrepeso <- datos %>% filter(EN == 1) %>% sample_n(50)
no_sobrepeso <- datos %>% filter(EN == 0) %>% sample_n(50)
muestra <- rbind(sobrepeso,no_sobrepeso)
n <- nrow(muestra)
n_entrenamiento <- floor(0.7 * n)
numeros <- sample.int(n = n, size = n_entrenamiento, replace = FALSE)
muestra_entrenamiento <- muestra[numeros,]
muestra_prueba <- datos[-numeros,]
#3.Usando las herramientas del paquete leaps, realizar una b?squeda exhaustiva para seleccionar entre dos y ocho predictores que ayuden a estimar la variable Peso (Weight), obviamente sin considerar las nuevas variables IMC ni EN, y luego utilizar las funciones del paquete caret para construir un modelo de regresi?n lineal
# m?ltiple con los predictores escogidos y evaluarlo usando bootstrapping.
muestra_entrenamiento["IMC"] <- NULL
muestra_entrenamiento["Height"] <- NULL
muestra_entrenamiento["EN"] <- NULL
muestra_entrenamiento["Gender"] <- NULL
# Usando regresi?n
modelos <- regsubsets(Weight ~ ., data = muestra_entrenamiento, method = "exhaustive",
nbest = 2, nvmax = 8)
print(plot(modelos))
View(datos)
View(muestra_prueba)
View(muestra_entrenamiento)
print(plot(modelos))
B <- 999
modelo <- train(Weight ~ Biiliac.diameter + Elbows.diameter + Shoulder.Girth + Waist.Girth + Thigh.Girth +
Knee.Girth + Wrist.Minimum.Girth + Age, data = muestra_entrenamiento, method = "lm",
trControl = trainControl(method = "boot", number = B,
savePredictions = TRUE))
print(summary(modelo))
control <- rfeControl(functions = rfFuncs, # random forest
method = "repeatedcv", # repeated cv
repeats = 10, # number of repeats
number = 10) # number of folds
View(muestra_prueba)
x <- data %>%
select(-age,) %>%
as.data.frame()
x <- data %>% select(-age) %>% as.data.frame()
library(dplyr)
library(caret)
library(leaps)
library(bootES)
library(randomForest)
library(dplyr)
library(caret)
library(leaps)
library(bootES)
library(randomForest)
basename <- "EP13 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act15",basename)
datos <- read.csv2(file = file)
#datos <- read.csv2("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP13 Datos.csv",stringsAsFactors = FALSE)
# El equipo crea la variable IMC (?ndice de masa corporal) como el peso de una persona (en kilogramos)
# dividida por el cuadrado de su estatura (en metros).
datos <- datos %>% mutate(IMC = Weight/((Height/100)^2))
datos <- datos %>% mutate(EN = ifelse(IMC >= 25.0, 1, 0))
semilla <- 4097
set.seed(semilla)
#2.Seleccionar una muestra de 100 personas, asegurando que la mitad tenga estado nutricional ?sobrepeso? y la otra mitad ?no sobrepeso?.
sobrepeso <- datos %>% filter(EN == 1) %>% sample_n(50)
no_sobrepeso <- datos %>% filter(EN == 0) %>% sample_n(50)
muestra <- rbind(sobrepeso,no_sobrepeso)
View(muestra)
n <- nrow(muestra)
n_entrenamiento <- floor(0.7 * n)
numeros <- sample.int(n = n, size = n_entrenamiento, replace = FALSE)
muestra_entrenamiento <- muestra[numeros,]
muestra_prueba <- datos[-numeros,]
View(muestra_prueba)
View(muestra_entrenamiento)
View(muestra)
library(dplyr)
library(caret)
library(leaps)
library(bootES)
library(randomForest)
basename <- "EP13 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act15",basename)
datos <- read.csv2(file = file)
#datos <- read.csv2("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP13 Datos.csv",stringsAsFactors = FALSE)
# El equipo crea la variable IMC (?ndice de masa corporal) como el peso de una persona (en kilogramos)
# dividida por el cuadrado de su estatura (en metros).
datos <- datos %>% mutate(IMC = Weight/((Height/100)^2))
# Si bien esta variable se usa para clasificar a las personas en varias clases de estado nutricional
# (bajo peso, normal, sobrepeso, obesidad, obesidad mÃ³rbida), para efectos de este ejercicio,
# usaremos dos clases: sobrepeso (IMC â‰¥ 25,0) y no sobrepeso (IMC â‰¤ 25,0).
# El equipo crea la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona.
# Creando la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona,
# siendo 1 Sobrepeso y 0 No sobrepeso.
datos <- datos %>% mutate(EN = ifelse(IMC >= 25.0, 1, 0))
#1. Definir la semilla a utilizar, que corresponde a los primeros cinco d?gitos del RUN del integrante de mayor edad del equipo.
semilla <- 4097
set.seed(semilla)
#2.Seleccionar una muestra de 100 personas, asegurando que la mitad tenga estado nutricional ?sobrepeso? y la otra mitad ?no sobrepeso?.
sobrepeso <- datos %>% filter(EN == 1) %>% sample_n(50)
no_sobrepeso <- datos %>% filter(EN == 0) %>% sample_n(50)
muestra <- rbind(sobrepeso,no_sobrepeso)
n <- nrow(muestra)
n_entrenamiento <- floor(0.7 * n)
numeros <- sample.int(n = n, size = n_entrenamiento, replace = FALSE)
muestra_entrenamiento <- muestra[numeros,]
muestra_prueba <- muestra[-numeros,] # Cambiar
#3.Usando las herramientas del paquete leaps, realizar una b?squeda exhaustiva para seleccionar entre dos y ocho predictores que ayuden a estimar la variable Peso (Weight), obviamente sin considerar las nuevas variables IMC ni EN, y luego utilizar las funciones del paquete caret para construir un modelo de regresi?n lineal
# m?ltiple con los predictores escogidos y evaluarlo usando bootstrapping.
muestra_entrenamiento["IMC"] <- NULL
muestra_entrenamiento["Height"] <- NULL
muestra_entrenamiento["EN"] <- NULL
muestra_entrenamiento["Gender"] <- NULL
modelos <- regsubsets(Weight ~ ., data = muestra_entrenamiento, method = "exhaustive",
nbest = 2, nvmax = 8)
print(plot(modelos))
print(plot(modelos))
print(plot(modelos))
B <- 999
modelo <- train(Weight ~ Biiliac.diameter + Elbows.diameter + Shoulder.Girth + Waist.Girth + Thigh.Girth +
Knee.Girth + Wrist.Minimum.Girth + Age, data = muestra_entrenamiento, method = "lm",
trControl = trainControl(method = "boot", number = B,
savePredictions = TRUE))
print(summary(modelo))
library(dplyr)
library(caret)
library(leaps)
library(bootES)
library(randomForest)
library(pROC)
basename <- "EP13 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act15",basename)
datos <- read.csv2(file = file)
# datos <- read.csv2("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP13 Datos.csv",stringsAsFactors = FALSE)
# El equipo crea la variable IMC (?ndice de masa corporal) como el peso de una persona (en kilogramos)
# dividida por el cuadrado de su estatura (en metros).
datos <- datos %>% mutate(IMC = Weight/((Height/100)^2))
# Si bien esta variable se usa para clasificar a las personas en varias clases de estado nutricional
# (bajo peso, normal, sobrepeso, obesidad, obesidad mÃ³rbida), para efectos de este ejercicio,
# usaremos dos clases: sobrepeso (IMC â‰¥ 25,0) y no sobrepeso (IMC â‰¤ 25,0).
# El equipo crea la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona.
# Creando la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona,
# siendo 1 Sobrepeso y 0 No sobrepeso.
datos <- datos %>% mutate(EN = ifelse(IMC >= 25.0, 1, 0))
#1. Definir la semilla a utilizar, que corresponde a los primeros cinco d?gitos del RUN del integrante de mayor edad del equipo.
semilla <- 4097
set.seed(semilla)
#2.Seleccionar una muestra de 100 personas, asegurando que la mitad tenga estado nutricional ?sobrepeso? y la otra mitad ?no sobrepeso?.
sobrepeso <- datos %>% filter(EN == 1) %>% sample_n(50)
no_sobrepeso <- datos %>% filter(EN == 0) %>% sample_n(50)
muestra <- rbind(sobrepeso,no_sobrepeso)
n <- nrow(muestra)
n_entrenamiento <- floor(0.7 * n)
numeros <- sample.int(n = n, size = n_entrenamiento, replace = FALSE)
muestra_entrenamiento <- muestra[numeros,]
muestra_prueba <- muestra[-numeros,]
#3.Usando las herramientas del paquete leaps, realizar una b?squeda exhaustiva para seleccionar entre dos y ocho predictores que ayuden a estimar la variable Peso (Weight), obviamente sin considerar las nuevas variables IMC ni EN, y luego utilizar las funciones del paquete caret para construir un modelo de regresi?n lineal
# m?ltiple con los predictores escogidos y evaluarlo usando bootstrapping.
# Se guardan las columnas IMC y EN de la muestra de entrenamiento y prueba para después,
# además se eliminan las colunas que no se utilizaran.
en_entrenamiento <- muestra_entrenamiento["EN"]
imc_entrenamiento <- muestra_entrenamiento["IMC"]
muestra_entrenamiento["IMC"] <- NULL
muestra_entrenamiento["Height"] <- NULL
muestra_entrenamiento["EN"] <- NULL
muestra_entrenamiento["Gender"] <- NULL
en_prueba <- muestra_entrenamiento["EN"]
imc_prueba <- muestra_entrenamiento["IMC"]
muestra_entrenamiento["IMC"] <- NULL
muestra_entrenamiento["Height"] <- NULL
muestra_entrenamiento["EN"] <- NULL
muestra_entrenamiento["Gender"] <- NULL
# Usando regresión
modelos <- regsubsets(Weight ~ ., data = muestra_entrenamiento, method = "exhaustive",
nbest = 2, nvmax = 8)
muestra_entrenamiento["IMC"] <- NULL
imc_entrenamiento <- muestra_entrenamiento["IMC"]
library(dplyr)
library(caret)
library(leaps)
library(bootES)
library(randomForest)
library(pROC)
basename <- "EP13 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act15",basename)
datos <- read.csv2(file = file)
# datos <- read.csv2("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP13 Datos.csv",stringsAsFactors = FALSE)
# El equipo crea la variable IMC (?ndice de masa corporal) como el peso de una persona (en kilogramos)
# dividida por el cuadrado de su estatura (en metros).
datos <- datos %>% mutate(IMC = Weight/((Height/100)^2))
# Si bien esta variable se usa para clasificar a las personas en varias clases de estado nutricional
# (bajo peso, normal, sobrepeso, obesidad, obesidad mÃ³rbida), para efectos de este ejercicio,
# usaremos dos clases: sobrepeso (IMC â‰¥ 25,0) y no sobrepeso (IMC â‰¤ 25,0).
# El equipo crea la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona.
# Creando la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona,
# siendo 1 Sobrepeso y 0 No sobrepeso.
datos <- datos %>% mutate(EN = ifelse(IMC >= 25.0, 1, 0))
#1. Definir la semilla a utilizar, que corresponde a los primeros cinco d?gitos del RUN del integrante de mayor edad del equipo.
semilla <- 4097
set.seed(semilla)
#2.Seleccionar una muestra de 100 personas, asegurando que la mitad tenga estado nutricional ?sobrepeso? y la otra mitad ?no sobrepeso?.
sobrepeso <- datos %>% filter(EN == 1) %>% sample_n(50)
no_sobrepeso <- datos %>% filter(EN == 0) %>% sample_n(50)
muestra <- rbind(sobrepeso,no_sobrepeso)
n <- nrow(muestra)
n_entrenamiento <- floor(0.7 * n)
numeros <- sample.int(n = n, size = n_entrenamiento, replace = FALSE)
muestra_entrenamiento <- muestra[numeros,]
muestra_prueba <- muestra[-numeros,]
View(muestra_entrenamiento)
imc_entrenamiento <- muestra_entrenamiento["IMC"]
en_entrenamiento <- muestra_entrenamiento["EN"]
muestra_entrenamiento["IMC"] <- NULL
muestra_entrenamiento["Height"] <- NULL
muestra_entrenamiento["EN"] <- NULL
muestra_entrenamiento["Gender"] <- NULL
library(dplyr)
library(caret)
library(leaps)
library(bootES)
library(randomForest)
library(pROC)
basename <- "EP13 Datos.csv"
file <- file.path("C:/Users/Dell PC/Desktop/IME-2022/Actividades/act15",basename)
datos <- read.csv2(file = file)
# datos <- read.csv2("C:/Users/dpriv/OneDrive/Escritorio/IngInfo/IME/Unidad3/Ep15/EP13 Datos.csv",stringsAsFactors = FALSE)
# El equipo crea la variable IMC (?ndice de masa corporal) como el peso de una persona (en kilogramos)
# dividida por el cuadrado de su estatura (en metros).
datos <- datos %>% mutate(IMC = Weight/((Height/100)^2))
# Si bien esta variable se usa para clasificar a las personas en varias clases de estado nutricional
# (bajo peso, normal, sobrepeso, obesidad, obesidad mÃ³rbida), para efectos de este ejercicio,
# usaremos dos clases: sobrepeso (IMC â‰¥ 25,0) y no sobrepeso (IMC â‰¤ 25,0).
# El equipo crea la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona.
# Creando la variable dicot?mica EN (estado nutricional) de acuerdo al valor de IMC de cada persona,
# siendo 1 Sobrepeso y 0 No sobrepeso.
datos <- datos %>% mutate(EN = ifelse(IMC >= 25.0, 1, 0))
#1. Definir la semilla a utilizar, que corresponde a los primeros cinco d?gitos del RUN del integrante de mayor edad del equipo.
semilla <- 4097
set.seed(semilla)
#2.Seleccionar una muestra de 100 personas, asegurando que la mitad tenga estado nutricional ?sobrepeso? y la otra mitad ?no sobrepeso?.
sobrepeso <- datos %>% filter(EN == 1) %>% sample_n(50)
no_sobrepeso <- datos %>% filter(EN == 0) %>% sample_n(50)
muestra <- rbind(sobrepeso,no_sobrepeso)
n <- nrow(muestra)
n_entrenamiento <- floor(0.7 * n)
numeros <- sample.int(n = n, size = n_entrenamiento, replace = FALSE)
muestra_entrenamiento <- muestra[numeros,]
muestra_prueba <- muestra[-numeros,]
#3.Usando las herramientas del paquete leaps, realizar una b?squeda exhaustiva para seleccionar entre dos y ocho predictores que ayuden a estimar la variable Peso (Weight), obviamente sin considerar las nuevas variables IMC ni EN, y luego utilizar las funciones del paquete caret para construir un modelo de regresi?n lineal
# m?ltiple con los predictores escogidos y evaluarlo usando bootstrapping.
# Se guardan las columnas IMC y EN de la muestra de entrenamiento y prueba para después,
# además se eliminan las colunas que no se utilizaran.
en_entrenamiento <- muestra_entrenamiento["EN"]
imc_entrenamiento <- muestra_entrenamiento["IMC"]
muestra_entrenamiento["IMC"] <- NULL
muestra_entrenamiento["Height"] <- NULL
muestra_entrenamiento["EN"] <- NULL
muestra_entrenamiento["Gender"] <- NULL
en_prueba <- muestra_prueba["EN"]
imc_prueba <- muestra_prueba["IMC"]
muestra_prueba["IMC"] <- NULL
muestra_prueba["Height"] <- NULL
muestra_prueba["EN"] <- NULL
muestra_prueba["Gender"] <- NULL
modelos <- regsubsets(Weight ~ ., data = muestra_entrenamiento, method = "exhaustive",
nbest = 2, nvmax = 8)
B <- 999
modelo <- train(Weight ~ Biiliac.diameter + Elbows.diameter + Shoulder.Girth + Waist.Girth + Thigh.Girth +
Knee.Girth + Wrist.Minimum.Girth + Age, data = muestra_entrenamiento, method = "lm",
trControl = trainControl(method = "boot", number = B,
savePredictions = TRUE))
print(summary(modelo))
